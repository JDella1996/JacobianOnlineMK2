{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaked\\\\Desktop\\\\JDella1996.net\\\\jdella1996-frontend\\\\src\\\\components\\\\Home.js\";\nimport React, { Component } from 'react';\nimport { TwitterTimelineEmbed, TwitterShareButton, TwitterFollowButton, TwitterHashtagButton, TwitterMentionButton, TwitterTweetEmbed, TwitterMomentShare, TwitterDMButton, TwitterVideoEmbed, TwitterOnAirButton } from 'react-twitter-embed';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.callBackendAPI = async () => {\n      const response = await fetch('/api/displayquotes', {\n        method: \"POST\",\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(this.state)\n      });\n      const body = await response.json();\n\n      if (response.status !== 200) {\n        throw Error(body.message);\n      }\n\n      return body;\n    };\n\n    this.state = {\n      quotes: []\n    };\n  }\n\n  async componentDidMount() {\n    // Call our fetch function below once the component mounts\n    await this.callBackendAPI().then(res => this.setState({\n      quotes: res\n    })).catch(err => console.log(err));\n  }\n\n  getQuotes() {\n    let RandomQuote = this.state.quotes[Math.floor(Math.random() * this.state.quotes.length)];\n    let Triggered = false;\n    print(this.state.quotes);\n    return this.state.quotes.map(quote => {\n      if (quote == RandomQuote & Triggered == false) {\n        Triggered = true;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"h4\", {\n          className: \"frontpage\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 21\n          }\n        }, \"Random quote of the day\"), quote.quote_author, \" - \\\"\", quote.quote_contents, \"\\\"\"));\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 2\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, \"Home\"), /*#__PURE__*/React.createElement(\"h1\", {\n      class: \"blinking\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 22\n      }\n    }, \"_\")), /*#__PURE__*/React.createElement(\"hr\", {\n      class: \"greenbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, this.getQuotes()), /*#__PURE__*/React.createElement(\"hr\", {\n      class: \"greenbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, \"My name is Jacob Della, welcome to my site! I am currently a student enrolled at Towson University, enrolled in their Computer Science program. and minoring in Math. My graduation date should be by sometime in 2021. I have numerous years of IT and Software experience doing projects at home and work. I generally tend to focus my efforts on more open technology stacks such as; Python, JavaScript, C++, and Java.If you were around for the original version of this website it used Django, it has now been rewritten to utilize React, Express API and a MySQL docker image. This website is hosted at my house in a Ubuntu VM using Docker images. All the important stuff is under links.\"), /*#__PURE__*/React.createElement(\"hr\", {\n      class: \"greenbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, \"Tweets by yours truly.\"), /*#__PURE__*/React.createElement(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TwitterTimelineEmbed, {\n      id: \"twitter-widget\",\n      sourceType: \"profile\",\n      screenName: \"JDella1996\",\n      options: {\n        height: 800,\n        width: 700\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, \"By JDella1996\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, \"Hosted on GRAVEYARD going 2 years strong.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, \"Last Updated 02/2020\")));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/jaked/Desktop/JDella1996.net/jdella1996-frontend/src/components/Home.js"],"names":["React","Component","TwitterTimelineEmbed","TwitterShareButton","TwitterFollowButton","TwitterHashtagButton","TwitterMentionButton","TwitterTweetEmbed","TwitterMomentShare","TwitterDMButton","TwitterVideoEmbed","TwitterOnAirButton","Home","constructor","props","callBackendAPI","response","fetch","method","headers","body","JSON","stringify","state","json","status","Error","message","quotes","componentDidMount","then","res","setState","catch","err","console","log","getQuotes","RandomQuote","Math","floor","random","length","Triggered","print","map","quote","quote_author","quote_contents","render","height","width"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport { TwitterTimelineEmbed, TwitterShareButton, TwitterFollowButton, TwitterHashtagButton, TwitterMentionButton, TwitterTweetEmbed, TwitterMomentShare, TwitterDMButton, TwitterVideoEmbed, TwitterOnAirButton } from 'react-twitter-embed';\r\n\r\nclass Home extends Component{\r\n    \r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            quotes : []\r\n        };\r\n    }\r\n\r\n    \r\n    async componentDidMount() {\r\n        // Call our fetch function below once the component mounts\r\n      await this.callBackendAPI()\r\n        .then(res => this.setState({ quotes: res }))\r\n        .catch(err => console.log(err));\r\n      }\r\n\r\n      callBackendAPI = async () => {\r\n        const response = await fetch('/api/displayquotes' , {\r\n          method: \"POST\",\r\n          headers: {\r\n              'Content-type': 'application/json'\r\n          },\r\n          body: JSON.stringify(this.state)\r\n          });\r\n        const body = await response.json();\r\n  \r\n        if (response.status !== 200) {\r\n          throw Error(body.message) \r\n        }\r\n        return body;\r\n      };\r\n\r\n      getQuotes() {\r\n        let RandomQuote = this.state.quotes[Math.floor(Math.random() * this.state.quotes.length)];\r\n        let Triggered = false;\r\n        print(this.state.quotes)\r\n        return this.state.quotes.map((quote) => {\r\n        if (quote  == RandomQuote & Triggered == false){\r\n            Triggered = true;\r\n            return (\r\n\r\n                <div>\r\n                <h4 className='frontpage'>\r\n                    <h3>Random quote of the day</h3>\r\n                  {quote.quote_author} - \"{quote.quote_contents}\" \r\n                \r\n                        \r\n                 </h4>\r\n                  </div>\r\n              ); \r\n        }\r\n\r\n        });\r\n      }\r\n\r\n\r\n    render(){\r\n    return (\r\n \r\n        <div className=\"page\"><section>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n\t<div id = \"heading\">\r\n        <h1>Home</h1><h1 class = \"blinking\">_</h1>   \r\n        </div> \r\n        <hr class = \"greenbar\"></hr>\r\n        <h1>{this.getQuotes()}</h1>\r\n        <hr class = \"greenbar\"></hr>\r\n        <p>My name is Jacob Della, welcome to my site! I am currently a student enrolled at Towson University, enrolled in their Computer Science program. and minoring in Math. My graduation date should be by sometime in 2021. \r\n          I have numerous years of IT and Software experience doing projects at home and work. I generally tend to focus my efforts on more open technology stacks such as; Python, JavaScript, C++, and Java.If you were \r\n          around for the original version of this website it used Django, it has now been rewritten to utilize React, Express API and a MySQL docker image. This website is hosted at my house in a Ubuntu VM using Docker images.\r\n          All the important stuff is under links.</p>\r\n          <hr class = \"greenbar\"></hr>\r\n          <h1>Tweets by yours truly.</h1>\r\n          <a>\r\n          <TwitterTimelineEmbed\r\n          id = \"twitter-widget\"\r\n          sourceType=\"profile\"\r\n          screenName=\"JDella1996\"\r\n          options={{height: 800, width:700}}\r\n          />\r\n          </a>\r\n        <p>By JDella1996</p>\r\n        <p>Hosted on GRAVEYARD going 2 years strong.</p>\r\n        <p>Last Updated 02/2020</p>\r\n        </section>\r\n       </div>\r\n        );\r\n    }\r\n\r\n}\r\n \r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}